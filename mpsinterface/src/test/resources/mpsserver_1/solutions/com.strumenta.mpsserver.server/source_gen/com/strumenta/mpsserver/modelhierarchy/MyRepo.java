package com.strumenta.mpsserver.modelhierarchy;

/*Generated by MPS */

import jetbrains.mps.extapi.module.SRepositoryBase;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModuleId;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.extapi.module.SModuleBase;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelId;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.util.annotation.ToRemove;

public class MyRepo extends SRepositoryBase {

  private Map<SModuleId, SModule> modules = MapSequence.fromMap(new HashMap<SModuleId, SModule>());

  public void addModule(SModule module) {
    MapSequence.fromMap(modules).put(module.getModuleId(), module);
    if (module instanceof SModuleBase) {
      ((SModuleBase) module).attach(this);
    }
  }

  @Nullable
  @Override
  public SModule getModule(@NotNull SModuleId id) {
    return MapSequence.fromMap(modules).get(id);
  }

  @NotNull
  @Override
  public Iterable<SModule> getModules() {
    return MapSequence.fromMap(modules).values();
  }
  @Nullable
  @Override
  public SModel getModel(@NotNull SModelId modelId) {
    SModel result = super.getModel(modelId);
    System.out.println("MyRepo.getModel. Modules: " + modules);
    return result;
  }

  @NotNull
  @Override
  public ModelAccess getModelAccess() {
    return new jetbrains.mps.smodel.ModelAccess() {
      @Override
      public void runReadAction(Runnable p0) {
        throw new UnsupportedOperationException();
      }

      @Override
      public void runReadInEDT(Runnable p0) {
        throw new UnsupportedOperationException();
      }

      @Override
      public void runWriteAction(Runnable p0) {
        throw new UnsupportedOperationException();
      }

      @Override
      public void runWriteInEDT(Runnable p0) {
        throw new UnsupportedOperationException();
      }

      @Override
      public void executeCommand(Runnable p0) {
        throw new UnsupportedOperationException();
      }

      /**
       * 
       * @deprecated 
       */
      @Deprecated
      @ToRemove(version = 3.3)
      @Override
      public void flushEventQueue() {
        throw new UnsupportedOperationException();
      }
      @Override
      public void checkReadAccess() {
        // OK 

      }
      @Override
      public void checkWriteAccess() {
        // OK 

      }
    };
  }

  @Override
  public void saveAll() {
    throw new UnsupportedOperationException();
  }
}
