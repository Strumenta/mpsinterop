package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Map;
import com.strumenta.mpsserver.extensionkit.code.Action;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import spark.Service;
import spark.Route;
import spark.Request;
import spark.Response;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.strumenta.mpsprotocol.data.ModelInfoDetailed;
import com.strumenta.mpsprotocol.data.NodeInfoDetailed;
import org.jetbrains.mps.openapi.model.SNode;

public class ModelRoutes {

  private SRepository repo;
  private DataExposer data;
  private Map<String, Map<String, Action>> conceptSpecificActions = MapSequence.fromMap(new HashMap<String, Map<String, Action>>());

  public ModelRoutes(SRepository repo, DataExposer data, Map<String, Map<String, Action>> conceptSpecificActions) {
    this.repo = repo;
    this.data = data;
    this.conceptSpecificActions = conceptSpecificActions;
  }


  public void addRoutes(Service sparkService) {
    sparkService.get("/models/:modelName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          final Wrappers._T<ModelInfoDetailed> info = new Wrappers._T<ModelInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              info.value = data.modelDetailsByName(modelName);
            }
          });
          return Server.OperationResult.success(info.value);
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.get("/models/:modelName/concept/:conceptName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          String conceptName = req.params("conceptName");
          final Wrappers._T<ModelInfoDetailed> info = new Wrappers._T<ModelInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              info.value = data.modelDetailsByName(modelName);
            }
          });
          return Server.OperationResult.success(info.value.filterByConcept(conceptName));
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.post("/models/:modelName/reload", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          String modelName = req.params("modelName");
          data.reload(modelName);
          return Server.OperationResult.success();
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.post("/models/:modelName/save", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          String modelName = req.params("modelName");
          data.saveSingleModel(modelName);
          return Server.OperationResult.success();
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.get("/models/:modelName/:nodeId", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          final long nodeId = Long.parseLong(req.params("nodeId"));
          final Wrappers._T<NodeInfoDetailed> info = new Wrappers._T<NodeInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              info.value = data.nodeInfoDetails(modelName, nodeId);
            }
          });
          return Server.OperationResult.success(info.value);
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.post("/models/:modelName/:nodeId/action/:actionName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          final long nodeId = Long.parseLong(req.params("nodeId"));
          final String actionName = req.params("actionName");
          final Wrappers._T<Object> result = new Wrappers._T<Object>(null);
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              SNode snode = data.getSNode(modelName, nodeId);
              String conceptName = snode.getConcept().getQualifiedName();
              if (MapSequence.fromMap(conceptSpecificActions).containsKey(conceptName)) {
                if (MapSequence.fromMap(MapSequence.fromMap(conceptSpecificActions).get(conceptName)).containsKey(actionName)) {
                  result.value = MapSequence.fromMap(MapSequence.fromMap(conceptSpecificActions).get(conceptName)).get(actionName).execute(snode);
                } else {
                  throw new NotFoundException("No action " + actionName + " found for concept " + conceptName);
                }
              } else {
                throw new NotFoundException("No actions found for concept " + conceptName);
              }
            }
          });
          return Server.OperationResult.success(result.value);
        } catch (Throwable e) {
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());

  }
}
