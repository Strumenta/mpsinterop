package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.transport.CredentialsProvider;
import java.io.File;
import java.io.IOException;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.api.AddCommand;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.RefSpec;
import org.eclipse.jgit.revwalk.RevCommit;

public class GitFacade {

  private Git git;
  private CredentialsProvider cp = CredentialsProvider.getDefault();

  public GitFacade(File repoPath) {
    try {
      git = Git.open(repoPath);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public void setCredentials(String gitUsername, String gitPassword) {
    cp = new UsernamePasswordCredentialsProvider(gitUsername, gitPassword);
  }

  public boolean addAllFiles() {
    if (isSomethingToBeAdded()) {
      AddCommand addCommand = git.add();
      try {
        Status status = git.status().call();
        for (String f : status.getModified()) {
          addCommand = addCommand.addFilepattern(f);
        }
        addCommand.call();
      } catch (GitAPIException e) {
        throw new RuntimeException(e);
      }
      return true;
    } else {
      return false;
    }
  }

  private boolean isSomethingToBeAdded() {
    try {
      Status status = git.status().call();
      return !(status.getModified().isEmpty());
    } catch (GitAPIException e) {
      throw new RuntimeException(e);
    }
  }

  public String currentBranch() {
    try {
      return git.getRepository().getBranch();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public void push(String remoteName) {
    try {
      git.push().setRemote(remoteName).setRefSpecs(new RefSpec(currentBranch())).setCredentialsProvider(cp).call();
    } catch (GitAPIException e) {
      throw new RuntimeException(e);
    }
  }


  public void commit(String message) {
    try {
      RevCommit rc = git.commit().setAuthor("mpsserver", "mpsserver@strumenta.com").setMessage(message).call();
    } catch (GitAPIException e) {
      throw new RuntimeException(e);
    }
  }
}
