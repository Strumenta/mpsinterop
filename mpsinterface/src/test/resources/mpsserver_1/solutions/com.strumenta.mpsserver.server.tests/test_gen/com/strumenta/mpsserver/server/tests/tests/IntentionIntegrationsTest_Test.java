package com.strumenta.mpsserver.server.tests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.module.SRepository;
import com.strumenta.mpsserver.logic.IntentionsIntegration;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import com.strumenta.businessorg.intentions.MyInvocationRegister;
import junit.framework.Assert;

@MPSLaunch
public class IntentionIntegrationsTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(IntentionIntegrationsTest_Test.class, "${mpsserver.home}", "r:086a4983-b245-40f9-a1ab-f4ca8b2b0f03(com.strumenta.mpsserver.server.tests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public IntentionIntegrationsTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_intentionsAreRetrievedCorrectly() throws Throwable {
    new TestBody(this).test_intentionsAreRetrievedCorrectly();
  }
  @Test
  public void test_intentionInvocation() throws Throwable {
    new TestBody(this).test_intentionInvocation();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_intentionsAreRetrievedCorrectly() throws Exception {
      addNodeById("7672163306534531103");
      SRepository repo = myProject.getRepository();
      IntentionsIntegration intentionsIntegration = new IntentionsIntegration(repo);
      List<IntentionsIntegration.Intention> intentionsOnPerson = intentionsIntegration.listIntentions(SNodeOperations.cast(getNodeById("7672163306534532257"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, "com.strumenta.businessorg"), 0x4923b41015868b9aL, "Person"))));
      assert ListSequence.fromList(intentionsOnPerson).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 1");
        }
      }) == null;
      assert ListSequence.fromList(intentionsOnPerson).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 2");
        }
      }) != null;
      assert ListSequence.fromList(intentionsOnPerson).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 3");
        }
      }) == null;

      List<IntentionsIntegration.Intention> intentionsOnRole = intentionsIntegration.listIntentions(SNodeOperations.cast(getNodeById("7672163306534532619"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, "com.strumenta.businessorg"), 0x4923b41015868b97L, "Role"))));
      assert ListSequence.fromList(intentionsOnRole).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 1");
        }
      }) == null;
      assert ListSequence.fromList(intentionsOnRole).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 2");
        }
      }) != null;
      assert ListSequence.fromList(intentionsOnRole).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 3");
        }
      }) != null;
    }
    public void test_intentionInvocation() throws Exception {
      addNodeById("7672163306534531103");
      MyInvocationRegister.clear();
      Assert.assertEquals(0, ListSequence.fromList(MyInvocationRegister.getInvocations()).count());

      SRepository repo = myProject.getRepository();
      IntentionsIntegration intentionsIntegration = new IntentionsIntegration(repo);

      List<IntentionsIntegration.Intention> intentionsOnRole = intentionsIntegration.listIntentions(SNodeOperations.cast(getNodeById("7672163306534532619"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, "com.strumenta.businessorg"), 0x4923b41015868b97L, "Role"))));
      IntentionsIntegration.Intention di2 = ListSequence.fromList(intentionsOnRole).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 2");
        }
      });
      di2.execute();
      Assert.assertEquals(1, ListSequence.fromList(MyInvocationRegister.getInvocations()).count());
      Assert.assertEquals("Dummy Intention 2", ListSequence.fromList(MyInvocationRegister.getInvocations()).last().intention);
      Assert.assertEquals(SNodeOperations.cast(getNodeById("7672163306534531535"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, "com.strumenta.businessorg"), 0x4923b41015868b94L, "Organization"))), ListSequence.fromList(MyInvocationRegister.getInvocations()).last().node);

      IntentionsIntegration.Intention di3 = ListSequence.fromList(intentionsOnRole).findFirst(new IWhereFilter<IntentionsIntegration.Intention>() {
        public boolean accept(IntentionsIntegration.Intention it) {
          return Objects.equals(it.getDescription(), "Dummy Intention 3");
        }
      });
      di3.execute();
      Assert.assertEquals(2, ListSequence.fromList(MyInvocationRegister.getInvocations()).count());
      Assert.assertEquals("Dummy Intention 3", ListSequence.fromList(MyInvocationRegister.getInvocations()).last().intention);
      Assert.assertEquals(SNodeOperations.cast(getNodeById("7672163306534532619"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, "com.strumenta.businessorg"), 0x4923b41015868b97L, "Role"))), ListSequence.fromList(MyInvocationRegister.getInvocations()).last().node);
    }


  }
}
