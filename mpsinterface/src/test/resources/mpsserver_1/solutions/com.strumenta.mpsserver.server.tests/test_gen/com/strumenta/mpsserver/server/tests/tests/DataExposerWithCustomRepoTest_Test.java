package com.strumenta.mpsserver.server.tests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import com.strumenta.mpsserver.modelhierarchy.MyRepo;
import com.strumenta.mpsserver.logic.DataExposer;
import junit.framework.Assert;
import com.strumenta.mpsserver.modelhierarchy.MyModule;
import java.util.UUID;
import com.strumenta.mpsprotocol.data.ModuleInfo;
import com.strumenta.mpsprotocol.KUUID;
import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.Solution;
import com.strumenta.mpsprotocol.data.SolutionInfo;

@MPSLaunch
public class DataExposerWithCustomRepoTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(DataExposerWithCustomRepoTest_Test.class, "${mpsserver.home}", "r:086a4983-b245-40f9-a1ab-f4ca8b2b0f03(com.strumenta.mpsserver.server.tests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public DataExposerWithCustomRepoTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_modulesListEmpty() throws Throwable {
    new TestBody(this).test_modulesListEmpty();
  }
  @Test
  public void test_modulesListNotEmpty() throws Throwable {
    new TestBody(this).test_modulesListNotEmpty();
  }
  @Test
  public void test_solutionsListEmpty() throws Throwable {
    new TestBody(this).test_solutionsListEmpty();
  }
  @Test
  public void test_solutionsListNotEmpty() throws Throwable {
    new TestBody(this).test_solutionsListNotEmpty();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_modulesListEmpty() throws Exception {
      MyRepo repo = new MyRepo();
      DataExposer dataExposer = new DataExposer(repo);
      Assert.assertEquals(0, dataExposer.modulesList().size());
    }
    public void test_modulesListNotEmpty() throws Exception {
      MyRepo repo = new MyRepo();
      repo.addModule(new MyModule(UUID.fromString("1983eea1-e90c-40f3-a117-fa3efb0f711a"), "my.model.a"));
      repo.addModule(new MyModule(UUID.fromString("316271b3-9b16-471a-a41c-03e27101d857"), "my.model.b"));

      DataExposer dataExposer = new DataExposer(repo);
      Assert.assertEquals(2, dataExposer.modulesList().size());
      Assert.assertEquals(true, dataExposer.modulesList().contains(new ModuleInfo("my.model.a", new KUUID(UUID.fromString("1983eea1-e90c-40f3-a117-fa3efb0f711a")))));
      Assert.assertEquals(true, dataExposer.modulesList().contains(new ModuleInfo("my.model.b", new KUUID(UUID.fromString("316271b3-9b16-471a-a41c-03e27101d857")))));
    }
    public void test_solutionsListEmpty() throws Exception {
      MyRepo repo = new MyRepo();
      repo.addModule(new MyModule(UUID.fromString("1983eea1-e90c-40f3-a117-fa3efb0f711a"), "my.model.a"));
      repo.addModule(new MyModule(UUID.fromString("316271b3-9b16-471a-a41c-03e27101d857"), "my.model.b"));

      DataExposer dataExposer = new DataExposer(repo);
      Assert.assertEquals(0, dataExposer.solutionsList().size());
    }
    public void test_solutionsListNotEmpty() throws Exception {
      MyRepo repo = new MyRepo();
      SolutionDescriptor sd1 = new SolutionDescriptor();
      sd1.setId(ModuleId.Regular.regular(UUID.fromString("316271b3-7777-471a-a41c-03e27101d857")));
      sd1.setNamespace("my.solution.a");
      Solution s1 = new Solution(sd1, null);
      repo.addModule(s1);
      repo.addModule(new MyModule(UUID.fromString("316271b3-9b16-471a-a41c-03e27101d857"), "my.model.b"));

      DataExposer dataExposer = new DataExposer(repo);
      Assert.assertEquals(1, dataExposer.solutionsList().size());
      SolutionInfo solutionInfo = new SolutionInfo("my.solution.a", new KUUID(UUID.fromString("316271b3-7777-471a-a41c-03e27101d857")));
      solutionInfo.setReadOnly(true);
      solutionInfo.setPackaged(true);
      Assert.assertEquals(true, dataExposer.solutionsList().contains(solutionInfo));
    }


  }
}
