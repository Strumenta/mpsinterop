package com.strumenta.mpsserver.server.tests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import com.strumenta.mpsserver.logic.DataExposer;
import java.util.List;
import com.strumenta.mpsprotocol.data.ModuleInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import junit.framework.Assert;
import java.util.UUID;
import com.strumenta.mpsprotocol.data.ModuleInfoDetailed;
import com.strumenta.mpsprotocol.data.ModelInfo;
import java.util.function.Predicate;
import com.strumenta.mpsprotocol.data.ModelInfoDetailed;
import com.strumenta.mpsprotocol.data.NodeInfo;
import com.strumenta.mpsprotocol.data.RegularNodeIDInfo;
import org.jetbrains.mps.openapi.model.SNode;
import com.strumenta.mpsprotocol.data.NodeInfoDetailed;
import com.strumenta.mpsprotocol.KUUID;
import com.strumenta.mpsprotocol.data.LanguageInfoDetailed;
import com.strumenta.mpsprotocol.data.ConceptInfo;
import com.strumenta.mpsprotocol.data.EnumLiteralInfo;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

@MPSLaunch
public class DataExposerTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(DataExposerTest_Test.class, "${mpsserver.home}", "r:086a4983-b245-40f9-a1ab-f4ca8b2b0f03(com.strumenta.mpsserver.server.tests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public DataExposerTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_getModulesListWithUUID() throws Throwable {
    new TestBody(this).test_getModulesListWithUUID();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNecessary() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNecessary();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNecessaryShort() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNecessaryShort();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNotNecessary() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNotNecessary();
  }
  @Test
  public void test_getConceptByName() throws Throwable {
    new TestBody(this).test_getConceptByName();
  }
  @Test
  public void test_getModuleDetailsByNameForLanguage() throws Throwable {
    new TestBody(this).test_getModuleDetailsByNameForLanguage();
  }
  @Test
  public void test_getModelDetailsByNameForLanguageStructure() throws Throwable {
    new TestBody(this).test_getModelDetailsByNameForLanguageStructure();
  }
  @Test
  public void test_rootNodesByConceptName() throws Throwable {
    new TestBody(this).test_rootNodesByConceptName();
  }
  @Test
  public void test_getNodeInfoDetails() throws Throwable {
    new TestBody(this).test_getNodeInfoDetails();
  }
  @Test
  public void test_getSNode() throws Throwable {
    new TestBody(this).test_getSNode();
  }
  @Test
  public void test_toInfoDetailed() throws Throwable {
    new TestBody(this).test_toInfoDetailed();
  }
  @Test
  public void test_toBasicNodeInfo() throws Throwable {
    new TestBody(this).test_toBasicNodeInfo();
  }
  @Test
  public void test_languageDetailed() throws Throwable {
    new TestBody(this).test_languageDetailed();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_getModulesListWithUUID() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      List<ModuleInfo> modules = data.modulesList();
      ModuleInfo moduleInfo = ListSequence.fromList(modules).findFirst(new IWhereFilter<ModuleInfo>() {
        public boolean accept(ModuleInfo it) {
          return Objects.equals(it.getName(), "jetbrains.mps.lang.smodel");
        }
      });
      Assert.assertNotNull(moduleInfo);
      Assert.assertEquals(UUID.fromString("7866978e-a0f0-4cc7-81bc-4d213d9375e1"), moduleInfo.getUuid());
    }
    public void test_injectStructureInConceptName_InsertionNecessary() throws Exception {
      Assert.assertEquals("gescomplus.dsl.core.structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("gescomplus.dsl.core.AllInstancesQuery"));
    }
    public void test_injectStructureInConceptName_InsertionNecessaryShort() throws Exception {
      Assert.assertEquals("structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("AllInstancesQuery"));
    }
    public void test_injectStructureInConceptName_InsertionNotNecessary() throws Exception {
      Assert.assertEquals("gescomplus.dsl.core.structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("gescomplus.dsl.core.structure.AllInstancesQuery"));
    }
    public void test_getConceptByName() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      Assert.assertEquals(CONCEPTS.Classifier$hJ, data.getConceptByName("jetbrains.mps.baseLanguage.Classifier"));
      Assert.assertEquals(CONCEPTS.Classifier$hJ, data.getConceptByName("jetbrains.mps.baseLanguage.structure.Classifier"));
    }
    public void test_getModuleDetailsByNameForLanguage() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      ModuleInfoDetailed moduleInfo = data.moduleDetailsByName("jetbrains.mps.baseLanguage");
      Assert.assertNotNull(moduleInfo);
      Assert.assertEquals(UUID.fromString("f3061a53-9226-4cc5-a443-f952ceaf5816"), moduleInfo.getUuid());
      Assert.assertEquals(null, moduleInfo.getForeignName());
      Assert.assertEquals("jetbrains.mps.baseLanguage", moduleInfo.getName());
      Assert.assertEquals(13, moduleInfo.getModels().size());

      ModelInfo structure = moduleInfo.getModels().stream().filter(new Predicate<ModelInfo>() {
        public boolean test(ModelInfo it) {
          return Objects.equals(it.getQualifiedName(), "jetbrains.mps.baseLanguage.structure");
        }
      }).findFirst().get();
      Assert.assertNotNull(structure);
      Assert.assertEquals(null, structure.getForeignName());
      Assert.assertEquals(UUID.fromString("00000000-0000-4000-0000-011c895902ca"), structure.getUuid());
    }
    public void test_getModelDetailsByNameForLanguageStructure() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      ModelInfoDetailed modelInfo = data.modelDetailsByName("jetbrains.mps.baseLanguage.structure");
      Assert.assertNotNull(modelInfo);
      Assert.assertEquals(null, modelInfo.getForeignName());
      Assert.assertEquals(UUID.fromString("00000000-0000-4000-0000-011c895902ca"), modelInfo.getUuid());
      Assert.assertEquals(true, modelInfo.getRoots().size() > 290);
      Assert.assertEquals(true, modelInfo.getRoots().size() < 310);

      NodeInfo integerConstant = modelInfo.getRoots().stream().filter(new Predicate<NodeInfo>() {
        public boolean test(NodeInfo it) {
          return Objects.equals(it.getName(), "IntegerConstant");
        }
      }).findFirst().get();
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
    }
    public void test_rootNodesByConceptName() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      List<SNode> roots = data.rootNodesByConceptName("jetbrains.mps.lang.test.structure.NodesTestCase");
      SNode thisTest = ListSequence.fromList(roots).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(it.getName(), "DataExposerTest");
        }
      });
      Assert.assertNotNull(thisTest);
    }
    public void test_getNodeInfoDetails() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfoDetailed integerConstant = data.nodeInfoDetails("jetbrains.mps.baseLanguage.structure", 1068580320020L);
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals("Concept", integerConstant.getConceptAlias());
      Assert.assertEquals(null, integerConstant.getContainingLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
      Assert.assertEquals("IntegerConstant", integerConstant.getProperties().get("name"));
      Assert.assertEquals("1068580320020", integerConstant.getProperties().get("conceptId"));
      Assert.assertEquals(false, integerConstant.getProperties().get("abstract"));
      Assert.assertEquals(false, integerConstant.getProperties().get("final"));
      Assert.assertEquals(new RegularNodeIDInfo(1179362310214L), integerConstant.getRefs().get("extends").getId());
      Assert.assertEquals(new ModelInfo("jetbrains.mps.baseLanguage.structure", new KUUID(UUID.fromString("00000000-0000-4000-0000-011c895902ca")), null, -1, true), integerConstant.getRefs().get("extends").getModel());
      Assert.assertEquals(1, integerConstant.getChildren().size());
    }
    public void test_getSNode() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      SNode integerConstant = data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L);
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.structure.ConceptDeclaration", integerConstant.getConcept().getQualifiedName());
      Assert.assertEquals(null, integerConstant.getContainmentLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
    }
    public void test_toInfoDetailed() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfoDetailed integerConstant = data.toInfoDetailed(data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L));
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals(null, integerConstant.getContainingLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
      Assert.assertEquals("IntegerConstant", integerConstant.getProperties().get("name"));
      Assert.assertEquals("1068580320020", integerConstant.getProperties().get("conceptId"));
      Assert.assertEquals(false, integerConstant.getProperties().get("abstract"));
      Assert.assertEquals(false, integerConstant.getProperties().get("final"));
      Assert.assertEquals(new RegularNodeIDInfo(1179362310214L), integerConstant.getRefs().get("extends").getId());
      Assert.assertEquals(new ModelInfo("jetbrains.mps.baseLanguage.structure", new KUUID(UUID.fromString("00000000-0000-4000-0000-011c895902ca")), null, -1, true), integerConstant.getRefs().get("extends").getModel());
      Assert.assertEquals(1, integerConstant.getChildren().size());
    }
    public void test_toBasicNodeInfo() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfo integerConstant = data.toBasicNodeInfo(data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L));
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
    }
    public void test_languageDetailed() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      LanguageInfoDetailed lid = data.languageDetailed("jetbrains.mps.lang.project");
      Assert.assertEquals("jetbrains.mps.lang.project", lid.getQualifiedName());

      // Concepts 
      Assert.assertEquals(19, lid.getConcepts().size());

      ConceptInfo ci = lid.getConcepts().stream().filter(new Predicate<ConceptInfo>() {
        public boolean test(ConceptInfo it) {
          return it.getQualifiedName().endsWith("MappingConfigExternalRef");
        }
      }).findFirst().get();
      Assert.assertNotNull(ci);
      Assert.assertEquals(null, ci.getAlias());
      Assert.assertEquals(2, ci.getDeclaredContainments().size());
      Assert.assertEquals(1, ci.getInheritedContainments().size());
      Assert.assertEquals(0, ci.getInterfaceConcepts().size());
      Assert.assertEquals(false, ci.isAbstract());
      Assert.assertEquals(false, ci.isInterface());
      Assert.assertEquals(0, ci.getDeclaredProperties().size());
      Assert.assertEquals(2, ci.getInheritedProperties().size());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.MappingConfigExternalRef", ci.getQualifiedName());
      Assert.assertEquals(0, ci.getDeclaredReferences().size());
      Assert.assertEquals(0, ci.getInheritedReferences().size());
      Assert.assertEquals(false, ci.getRootable());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.MappingConfigRefBase", ci.getSuperConcept());

      ci = lid.getConcepts().stream().filter(new Predicate<ConceptInfo>() {
        public boolean test(ConceptInfo it) {
          return it.getQualifiedName().endsWith("MappingConfigNormalRef");
        }
      }).findFirst().get();
      Assert.assertNotNull(ci);
      Assert.assertEquals("ref", ci.getAlias());
      Assert.assertEquals(0, ci.getDeclaredContainments().size());
      Assert.assertEquals(1, ci.getInheritedContainments().size());
      Assert.assertEquals(0, ci.getInterfaceConcepts().size());
      Assert.assertEquals(false, ci.isAbstract());
      Assert.assertEquals(false, ci.isInterface());
      Assert.assertEquals(3, ci.getDeclaredProperties().size());
      Assert.assertEquals(2, ci.getInheritedProperties().size());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.MappingConfigNormalRef", ci.getQualifiedName());
      Assert.assertEquals(0, ci.getDeclaredReferences().size());
      Assert.assertEquals(0, ci.getInheritedReferences().size());
      Assert.assertEquals(false, ci.getRootable());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.MappingConfigRefBase", ci.getSuperConcept());

      ci = lid.getConcepts().stream().filter(new Predicate<ConceptInfo>() {
        public boolean test(ConceptInfo it) {
          return it.getQualifiedName().endsWith("DevKit");
        }
      }).findFirst().get();
      Assert.assertNotNull(ci);
      Assert.assertEquals(null, ci.getAlias());
      Assert.assertEquals(3, ci.getDeclaredContainments().size());
      Assert.assertEquals(0, ci.getInterfaceConcepts().size());
      Assert.assertEquals(false, ci.isAbstract());
      Assert.assertEquals(false, ci.isInterface());
      Assert.assertEquals(2, ci.getDeclaredProperties().size());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.DevKit", ci.getQualifiedName());
      Assert.assertEquals(0, ci.getDeclaredReferences().size());
      Assert.assertEquals(true, ci.getRootable());
      Assert.assertEquals("jetbrains.mps.lang.project.structure.Module", ci.getSuperConcept());


      // Enums 
      Assert.assertEquals(1, lid.getEnums().size());
      Assert.assertEquals("RuleType", lid.getEnums().get(0).getName());
      Assert.assertEquals("strictly_before", lid.getEnums().get(0).getDefaultLiteral());
      Assert.assertEquals(5, lid.getEnums().get(0).getLiterals().size());
      Assert.assertEquals(new EnumLiteralInfo("strictly_before", "before (<)"), lid.getEnums().get(0).getLiterals().get(0));
    }


  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Classifier$hJ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier");
  }
}
