package com.strumenta.mpsserver.server.tests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import com.strumenta.mpsprotocol.data.RegularNodeIDInfo;
import com.strumenta.mpsserver.logic.Serialization;
import junit.framework.Assert;
import com.strumenta.mpsprotocol.data.NodeIDInfo;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.strumenta.mpsprotocol.data.ForeignNodeIDInfo;
import com.strumenta.mpsserver.logic.DataExposer;
import com.strumenta.mpsprotocol.data.ModuleInfoDetailed;
import java.util.UUID;
import com.strumenta.mpsprotocol.data.ModelInfo;
import java.util.function.Predicate;
import java.util.Objects;
import com.strumenta.mpsprotocol.data.ModelInfoDetailed;
import com.strumenta.mpsprotocol.data.NodeInfo;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.strumenta.mpsprotocol.data.NodeInfoDetailed;
import com.strumenta.mpsprotocol.KUUID;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

@MPSLaunch
public class SerializationTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(SerializationTest_Test.class, "${mpsserver.home}", "r:086a4983-b245-40f9-a1ab-f4ca8b2b0f03(com.strumenta.mpsserver.server.tests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public SerializationTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_serializationAndUnserializationOfRegularNodeIDInfo() throws Throwable {
    new TestBody(this).test_serializationAndUnserializationOfRegularNodeIDInfo();
  }
  @Test
  public void test_serializationOfRegularNodeIDInfo() throws Throwable {
    new TestBody(this).test_serializationOfRegularNodeIDInfo();
  }
  @Test
  public void test_unserializationOfRegularNodeIDInfo() throws Throwable {
    new TestBody(this).test_unserializationOfRegularNodeIDInfo();
  }
  @Test
  public void test_serializationOfForeignNodeIDInfo() throws Throwable {
    new TestBody(this).test_serializationOfForeignNodeIDInfo();
  }
  @Test
  public void test_unserializationOfForeignNodeIDInfo() throws Throwable {
    new TestBody(this).test_unserializationOfForeignNodeIDInfo();
  }
  @Test
  public void test_serializationAndUnserializationOfForeignNodeIDInfo() throws Throwable {
    new TestBody(this).test_serializationAndUnserializationOfForeignNodeIDInfo();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNecessary() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNecessary();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNecessaryShort() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNecessaryShort();
  }
  @Test
  public void test_injectStructureInConceptName_InsertionNotNecessary() throws Throwable {
    new TestBody(this).test_injectStructureInConceptName_InsertionNotNecessary();
  }
  @Test
  public void test_getConceptByName() throws Throwable {
    new TestBody(this).test_getConceptByName();
  }
  @Test
  public void test_getModuleDetailsByNameForLanguage() throws Throwable {
    new TestBody(this).test_getModuleDetailsByNameForLanguage();
  }
  @Test
  public void test_getModelDetailsByNameForLanguageStructure() throws Throwable {
    new TestBody(this).test_getModelDetailsByNameForLanguageStructure();
  }
  @Test
  public void test_rootNodesByConceptName() throws Throwable {
    new TestBody(this).test_rootNodesByConceptName();
  }
  @Test
  public void test_getNodeInfoDetails() throws Throwable {
    new TestBody(this).test_getNodeInfoDetails();
  }
  @Test
  public void test_getSNode() throws Throwable {
    new TestBody(this).test_getSNode();
  }
  @Test
  public void test_toInfoDetailed() throws Throwable {
    new TestBody(this).test_toInfoDetailed();
  }
  @Test
  public void test_toBasicNodeInfo() throws Throwable {
    new TestBody(this).test_toBasicNodeInfo();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_serializationAndUnserializationOfRegularNodeIDInfo() throws Exception {
      RegularNodeIDInfo data = new RegularNodeIDInfo(123456L);
      String json = Serialization.getInstance().jsonify(data);
      Assert.assertEquals(data, Serialization.getInstance().unserialize(json, NodeIDInfo.class));
    }
    public void test_serializationOfRegularNodeIDInfo() throws Exception {
      RegularNodeIDInfo data = new RegularNodeIDInfo(123456L);
      JsonElement json = Serialization.getInstance().jsonifyData(data);
      JsonObject jo = new JsonObject();
      jo.addProperty("regularId", "123456");
      Assert.assertEquals(jo, json);
    }
    public void test_unserializationOfRegularNodeIDInfo() throws Exception {
      JsonObject jo = new JsonObject();
      jo.addProperty("regularId", "123456");
      NodeIDInfo unserializaed = Serialization.getInstance().unserialize(jo.toString(), NodeIDInfo.class);
      Assert.assertEquals(new RegularNodeIDInfo(123456L), unserializaed);
    }
    public void test_serializationOfForeignNodeIDInfo() throws Exception {
      NodeIDInfo data = new ForeignNodeIDInfo("somedescription");
      JsonElement json = Serialization.getInstance().jsonifyData(data);
      JsonObject jo = new JsonObject();
      jo.addProperty("foreignId", "somedescription");
      Assert.assertEquals(jo, json);
    }
    public void test_unserializationOfForeignNodeIDInfo() throws Exception {
      JsonObject jo = new JsonObject();
      jo.addProperty("foreignId", "somedescription");
      NodeIDInfo unserializaed = Serialization.getInstance().unserialize(jo.toString(), NodeIDInfo.class);
      Assert.assertEquals(new ForeignNodeIDInfo("somedescription"), unserializaed);
    }
    public void test_serializationAndUnserializationOfForeignNodeIDInfo() throws Exception {
      ForeignNodeIDInfo data = new ForeignNodeIDInfo("somedescription");
      String json = Serialization.getInstance().jsonify(data);
      Assert.assertEquals(data, Serialization.getInstance().unserialize(json, NodeIDInfo.class));
    }
    public void test_injectStructureInConceptName_InsertionNecessary() throws Exception {
      Assert.assertEquals("gescomplus.dsl.core.structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("gescomplus.dsl.core.AllInstancesQuery"));
    }
    public void test_injectStructureInConceptName_InsertionNecessaryShort() throws Exception {
      Assert.assertEquals("structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("AllInstancesQuery"));
    }
    public void test_injectStructureInConceptName_InsertionNotNecessary() throws Exception {
      Assert.assertEquals("gescomplus.dsl.core.structure.AllInstancesQuery", DataExposer.injectStructureInConceptName("gescomplus.dsl.core.structure.AllInstancesQuery"));
    }
    public void test_getConceptByName() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      Assert.assertEquals(CONCEPTS.Classifier$hJ, data.getConceptByName("jetbrains.mps.baseLanguage.Classifier"));
      Assert.assertEquals(CONCEPTS.Classifier$hJ, data.getConceptByName("jetbrains.mps.baseLanguage.structure.Classifier"));
    }
    public void test_getModuleDetailsByNameForLanguage() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      ModuleInfoDetailed moduleInfo = data.moduleDetailsByName("jetbrains.mps.baseLanguage");
      Assert.assertNotNull(moduleInfo);
      Assert.assertEquals(UUID.fromString("f3061a53-9226-4cc5-a443-f952ceaf5816"), moduleInfo.getUuid());
      Assert.assertEquals(null, moduleInfo.getForeignName());
      Assert.assertEquals("jetbrains.mps.baseLanguage", moduleInfo.getName());
      Assert.assertEquals(13, moduleInfo.getModels().size());

      ModelInfo structure = moduleInfo.getModels().stream().filter(new Predicate<ModelInfo>() {
        public boolean test(ModelInfo it) {
          return Objects.equals(it.getQualifiedName(), "jetbrains.mps.baseLanguage.structure");
        }
      }).findFirst().get();
      Assert.assertNotNull(structure);
      Assert.assertEquals(null, structure.getForeignName());
      Assert.assertEquals(UUID.fromString("00000000-0000-4000-0000-011c895902ca"), structure.getUuid());
    }
    public void test_getModelDetailsByNameForLanguageStructure() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      ModelInfoDetailed modelInfo = data.modelDetailsByName("jetbrains.mps.baseLanguage.structure");
      Assert.assertNotNull(modelInfo);
      Assert.assertEquals(null, modelInfo.getForeignName());
      Assert.assertEquals(UUID.fromString("00000000-0000-4000-0000-011c895902ca"), modelInfo.getUuid());
      Assert.assertEquals(true, modelInfo.getRoots().size() > 290);
      Assert.assertEquals(true, modelInfo.getRoots().size() < 310);

      NodeInfo integerConstant = modelInfo.getRoots().stream().filter(new Predicate<NodeInfo>() {
        public boolean test(NodeInfo it) {
          return Objects.equals(it.getName(), "IntegerConstant");
        }
      }).findFirst().get();
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
    }
    public void test_rootNodesByConceptName() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      List<SNode> roots = data.rootNodesByConceptName("jetbrains.mps.lang.test.structure.NodesTestCase");
      SNode thisTest = ListSequence.fromList(roots).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(it.getName(), "DataExposerTest");
        }
      });
      Assert.assertNotNull(thisTest);
    }
    public void test_getNodeInfoDetails() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfoDetailed integerConstant = data.nodeInfoDetails("jetbrains.mps.baseLanguage.structure", 1068580320020L);
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals("Concept", integerConstant.getConceptAlias());
      Assert.assertEquals(null, integerConstant.getContainingLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
      Assert.assertEquals("IntegerConstant", integerConstant.getProperties().get("name"));
      Assert.assertEquals("1068580320020", integerConstant.getProperties().get("conceptId"));
      Assert.assertEquals(false, integerConstant.getProperties().get("abstract"));
      Assert.assertEquals(false, integerConstant.getProperties().get("final"));
      Assert.assertEquals(new RegularNodeIDInfo(1179362310214L), integerConstant.getRefs().get("extends").getId());
      Assert.assertEquals(new ModelInfo("jetbrains.mps.baseLanguage.structure", new KUUID(UUID.fromString("00000000-0000-4000-0000-011c895902ca")), null, -1, true), integerConstant.getRefs().get("extends").getModel());
      Assert.assertEquals(1, integerConstant.getChildren().size());
    }
    public void test_getSNode() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      SNode integerConstant = data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L);
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.structure.ConceptDeclaration", integerConstant.getConcept().getQualifiedName());
      Assert.assertEquals(null, integerConstant.getContainmentLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
    }
    public void test_toInfoDetailed() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfoDetailed integerConstant = data.toInfoDetailed(data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L));
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals(null, integerConstant.getContainingLink());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
      Assert.assertEquals("IntegerConstant", integerConstant.getProperties().get("name"));
      Assert.assertEquals("1068580320020", integerConstant.getProperties().get("conceptId"));
      Assert.assertEquals(false, integerConstant.getProperties().get("abstract"));
      Assert.assertEquals(false, integerConstant.getProperties().get("final"));
      Assert.assertEquals(new RegularNodeIDInfo(1179362310214L), integerConstant.getRefs().get("extends").getId());
      Assert.assertEquals(new ModelInfo("jetbrains.mps.baseLanguage.structure", new KUUID(UUID.fromString("00000000-0000-4000-0000-011c895902ca")), null, -1, true), integerConstant.getRefs().get("extends").getModel());
      Assert.assertEquals(1, integerConstant.getChildren().size());
    }
    public void test_toBasicNodeInfo() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      NodeInfo integerConstant = data.toBasicNodeInfo(data.getSNode("jetbrains.mps.baseLanguage.structure", 1068580320020L));
      Assert.assertNotNull(integerConstant);
      Assert.assertEquals("jetbrains.mps.lang.structure.ConceptDeclaration", integerConstant.getConcept());
      Assert.assertEquals("IntegerConstant", integerConstant.getName());
      Assert.assertEquals(1068580320020L, ((RegularNodeIDInfo) integerConstant.getId()).getRegularId());
    }


  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Classifier$hJ = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier");
  }
}
