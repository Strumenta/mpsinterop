package com.strumenta.mpsserver.ide.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.tool.GeneratedTool;
import javax.swing.Icon;
import jetbrains.mps.project.Project;
import javax.swing.JPanel;
import com.intellij.openapi.wm.ToolWindowAnchor;
import jetbrains.mps.ide.project.ProjectHelper;
import java.io.File;
import jetbrains.mps.project.MPSProject;
import javax.swing.JComponent;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import com.strumenta.mpsserver.logic.Server;

public class ServerLauncherTool_Tool extends GeneratedTool {
  private static final Icon ICON = null;
  private Project currentProject;
  private JPanel displayPane;
  public ServerLauncherTool_Tool(com.intellij.openapi.project.Project project) {
    super(project, "MPS Server Launcher", null, ICON, ToolWindowAnchor.RIGHT, false);
  }
  public void init(com.intellij.openapi.project.Project project) {
    super.init(project);
    ServerLauncherTool_Tool.this.currentProject = ProjectHelper.fromIdeaProject(project);
  }
  private File getGitRoot() {
    File projectFile = ServerLauncherTool_Tool.this.getCurrentProject().getProjectFile();
    System.out.println("PROJECT FILE " + projectFile);
    File gitRoot = projectFile;
    boolean found = false;
    while (!(found)) {
      File gitDir = new File(gitRoot, ".git");
      if (gitDir.exists()) {
        found = true;
      } else if (gitDir.getParentFile() == null) {
        return null;
      } else {
        gitRoot = gitRoot.getParentFile();
      }
    }
    return gitRoot;
  }
  public Project getCurrentProject() {
    return ServerLauncherTool_Tool.this.currentProject;
  }
  private MPSProject mpsProject() {
    return ServerLauncherTool_Tool.this.currentProject.getComponent(MPSProject.class);
  }
  public JComponent getComponent() {
    JPanel panel = new JPanel();
    JButton b = new JButton("Launch");
    b.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        Server.ServerConfiguration serverConfiguration = new Server.ServerConfiguration(ServerLauncherTool_Tool.this.currentProject.getRepository()).gitRoot(ServerLauncherTool_Tool.this.getGitRoot());
        Server sc = Server.launch(serverConfiguration);
        System.out.println("[LAUNCHED]");
      }
    });
    panel.add(b);
    return panel;
  }
}
