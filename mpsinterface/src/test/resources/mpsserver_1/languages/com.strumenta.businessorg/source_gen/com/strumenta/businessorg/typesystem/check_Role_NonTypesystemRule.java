package com.strumenta.businessorg.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.PropertyMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class check_Role_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Role_NonTypesystemRule() {
  }
  public void applyRule(final SNode role, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getString(role, PROPS.name$tAp1) != null && isNotEmptyString(SPropertyOperations.getString(role, PROPS.name$tAp1))) {
      for (SNode s : ListSequence.fromList(SNodeOperations.getAllSiblings(role, false))) {
        if (SNodeOperations.isInstanceOf(s, CONCEPTS.Role$j3) && SPropertyOperations.getString(SNodeOperations.cast(s, CONCEPTS.Role$j3), PROPS.name$tAp1) != null && Objects.equals(SPropertyOperations.getString(SNodeOperations.cast(s, CONCEPTS.Role$j3), PROPS.name$tAp1), SPropertyOperations.getString(role, PROPS.name$tAp1))) {
          {
            final MessageTarget errorTarget = new PropertyMessageTarget(PROPS.name$tAp1);
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(role, "Duplicate name", "r:3588f820-f38c-4943-a5b1-ddc6c762e9a9(com.strumenta.businessorg.typesystem)", "3185435802458742560", null, errorTarget);
          }
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Role$j3;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Role$j3 = MetaAdapterFactory.getConcept(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, 0x4923b41015868b97L, "com.strumenta.businessorg.structure.Role");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
