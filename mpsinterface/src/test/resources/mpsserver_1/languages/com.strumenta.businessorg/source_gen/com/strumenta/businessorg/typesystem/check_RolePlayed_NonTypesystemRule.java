package com.strumenta.businessorg.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class check_RolePlayed_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_RolePlayed_NonTypesystemRule() {
  }
  public void applyRule(final SNode rolePlayed, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode s : ListSequence.fromList(SNodeOperations.getAllSiblings(rolePlayed, false))) {
      if (SNodeOperations.isInstanceOf(s, CONCEPTS.RolePlayed$g1) && SLinkOperations.getTarget(SNodeOperations.cast(s, CONCEPTS.RolePlayed$g1), LINKS.role$LfTF) != null && Objects.equals(SLinkOperations.getTarget(SNodeOperations.cast(s, CONCEPTS.RolePlayed$g1), LINKS.role$LfTF), SLinkOperations.getTarget(rolePlayed, LINKS.role$LfTF))) {
        {
          final MessageTarget errorTarget = new ReferenceMessageTarget(LINKS.role$LfTF);
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(rolePlayed, "Duplicate role", "r:3588f820-f38c-4943-a5b1-ddc6c762e9a9(com.strumenta.businessorg.typesystem)", "2649606736827383072", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.RolePlayed$g1;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RolePlayed$g1 = MetaAdapterFactory.getConcept(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, 0x4923b41015880f85L, "com.strumenta.businessorg.structure.RolePlayed");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink role$LfTF = MetaAdapterFactory.getReferenceLink(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, 0x4923b41015880f85L, 0x4923b41015880f86L, "role");
  }
}
