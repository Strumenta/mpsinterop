package com.strumenta.mpsserver.server.tests.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import com.strumenta.mpsserver.logic.DataExposer;
import com.strumenta.mpsprotocol.data.LanguageInfoDetailed;
import com.google.gson.JsonObject;
import com.strumenta.mpsserver.logic.Serialization;
import junit.framework.Assert;

@MPSLaunch
public class ModulesRoutesTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(ModulesRoutesTest_Test.class, "${mpsserver.home}", "r:086a4983-b245-40f9-a1ab-f4ca8b2b0f03(com.strumenta.mpsserver.server.tests.tests@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public ModulesRoutesTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_serializeLanguageInfo() throws Throwable {
    new TestBody(this).test_serializeLanguageInfo();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_serializeLanguageInfo() throws Exception {
      DataExposer data = new DataExposer(myProject.getRepository());
      LanguageInfoDetailed lid = data.languageDetailed("jetbrains.mps.lang.project");
      JsonObject root = Serialization.getInstance().jsonifyData(lid).getAsJsonObject();
      System.out.println(root.keySet());
      Assert.assertEquals(4, root.keySet().size());
      Assert.assertTrue(root.keySet().contains("concepts"));
    }


  }
}
