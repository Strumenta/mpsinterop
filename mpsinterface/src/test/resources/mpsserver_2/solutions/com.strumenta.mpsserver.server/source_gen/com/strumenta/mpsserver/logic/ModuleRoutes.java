package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Map;
import com.strumenta.mpsserver.extensionkit.code.Action;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import spark.Service;
import spark.Route;
import spark.Request;
import spark.Response;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.strumenta.mpsprotocol.data.ModuleInfoDetailed;
import java.util.function.Predicate;
import com.strumenta.mpsprotocol.data.ModelInfo;
import java.util.stream.Collectors;
import com.strumenta.mpsprotocol.data.LanguageInfoDetailed;

public class ModuleRoutes extends Routes {

  private SRepository repo;
  private DataExposer data;
  private Map<String, Map<String, Action>> conceptSpecificActions = MapSequence.fromMap(new HashMap<String, Map<String, Action>>());

  public ModuleRoutes(SRepository repo, DataExposer data, Map<String, Map<String, Action>> conceptSpecificActions) {
    this.repo = repo;
    this.data = data;
    this.conceptSpecificActions = conceptSpecificActions;
  }

  public static int NOT_FOUND = 404;

  public void addRoutes(Service sparkService) {
    sparkService.get("/modules/:moduleName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String moduleName = req.params("moduleName");
          final Wrappers._T<ModuleInfoDetailed> info = new Wrappers._T<ModuleInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              info.value = data.moduleDetailsByName(moduleName);
            }
          });
          boolean includeModelsWithoutUUID = queryFlag(req, "includeModelsWithoutUUID");
          if (!(includeModelsWithoutUUID)) {
            info.value.setModels(info.value.getModels().stream().filter(new Predicate<ModelInfo>() {
              public boolean test(ModelInfo it) {
                return it.getUuid() != null;
              }
            }).collect(Collectors.<ModelInfo>toList()));
          }
          return Server.OperationResult.success(info.value);
        } catch (NotFoundException e) {
          res.status(NOT_FOUND);
          return null;
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.get("/languages/:languageName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String languageName = req.params("languageName");
          final Wrappers._T<LanguageInfoDetailed> info = new Wrappers._T<LanguageInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              info.value = data.languageDetailed(languageName);
            }
          });
          if (info.value == null) {
            throw new NotFoundException("language " + languageName);
          }
          return Server.OperationResult.success(info.value);
        } catch (NotFoundException e) {
          res.status(NOT_FOUND);
          return null;
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());

  }
}
