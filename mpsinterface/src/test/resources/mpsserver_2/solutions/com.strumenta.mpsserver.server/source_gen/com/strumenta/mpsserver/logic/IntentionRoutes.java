package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import spark.Service;
import spark.Route;
import spark.Request;
import spark.Response;
import com.strumenta.mpsprotocol.KUUID;
import java.util.UUID;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.function.Consumer;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;

public class IntentionRoutes {

  private SRepository repo;
  private DataExposer data;
  private IntentionsIntegrationServerModule intentionsModule;

  public IntentionRoutes(SRepository repo, DataExposer data, IntentionsIntegrationServerModule intentionsModule) {
    this.repo = repo;
    this.data = data;
    this.intentionsModule = intentionsModule;
  }

  public void addRoutes(Service sparkService) {
    sparkService.get("/intentions/:blockUUID", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          KUUID blockUUID = new KUUID(UUID.fromString(req.params("blockUUID")));
          if (intentionsModule.hasBlock(blockUUID)) {
            return Server.OperationResult.success(intentionsModule.intentionsData(blockUUID));
          } else {
            return Server.OperationResult.failure("Intentions block not found: " + blockUUID);
          }
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.post("/intentions/:modelName/:nodeId/createBlock", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          final String nodeId = req.params("nodeId");
          final Wrappers._T<SNode> node = new Wrappers._T<SNode>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              node.value = data.getSNode(modelName, Long.parseLong(nodeId));
            }
          });

          if (node.value != null) {
            return Server.OperationResult.success(intentionsModule.createBlock(node.value, new Consumer<Tuples._2<KUUID, List<IntentionsIntegration.Intention>>>() {
              @Override
              public void accept(Tuples._2<KUUID, List<IntentionsIntegration.Intention>> p0) {
                // do nothing 
              }
            }));
          } else {
            return Server.OperationResult.failure("Node not found: " + modelName + "/" + nodeId);
          }
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.post("/intentions/:blockUUID/execute/:ordinal", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          KUUID blockUUID = new KUUID(UUID.fromString(req.params("blockUUID")));
          int ordinal = Integer.parseInt(req.params("ordinal"));
          intentionsModule.execute(blockUUID, ordinal);
          return Server.OperationResult.success();
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.delete("/intentions/:blockUUID", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          KUUID blockUUID = new KUUID(UUID.fromString(req.params("blockUUID")));
          intentionsModule.deleteBlock(blockUUID);
          return Server.OperationResult.success();
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
  }
}
