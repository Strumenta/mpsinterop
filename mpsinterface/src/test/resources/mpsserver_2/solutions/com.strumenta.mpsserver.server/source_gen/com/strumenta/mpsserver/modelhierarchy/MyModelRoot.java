package com.strumenta.mpsserver.modelhierarchy;

/*Generated by MPS */

import jetbrains.mps.extapi.persistence.ModelRootBase;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.extapi.module.SModuleBase;
import jetbrains.mps.extapi.model.SModelBase;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SModelId;
import java.util.Objects;
import org.jetbrains.mps.openapi.persistence.Memento;

public class MyModelRoot extends ModelRootBase {

  private List<SModel> models = ListSequence.fromList(new ArrayList<SModel>());

  public void addModel(SModel model) {
    if (model instanceof MyModel) {
      ((MyModel) model).setModule(this.getModule());
    }
    ListSequence.fromList(models).addElement(model);
    if (getModule() instanceof SModuleBase && model instanceof SModelBase) {
      ((SModuleBase) getModule()).registerModel(((SModelBase) model));
    }
  }

  @NotNull
  @Override
  public Iterable<SModel> loadModels() {
    return models;
  }
  @Override
  public String getType() {
    throw new UnsupportedOperationException();
  }
  @Override
  public String getPresentation() {
    throw new UnsupportedOperationException();
  }
  @Nullable
  @Override
  public SModel getModel(@NotNull SModelId id) {
    for (SModel m : ListSequence.fromList(models)) {
      if (Objects.equals(m.getModelId(), id)) {
        return m;
      }
    }
    return null;
  }
  @Deprecated
  @Override
  public boolean canCreateModel(@NotNull String string) {
    throw new UnsupportedOperationException();
  }
  @Nullable
  @Override
  public SModel createModel(@NotNull String string) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void save(@NotNull Memento memento) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void load(@NotNull Memento memento) {
    throw new UnsupportedOperationException();
  }
}
