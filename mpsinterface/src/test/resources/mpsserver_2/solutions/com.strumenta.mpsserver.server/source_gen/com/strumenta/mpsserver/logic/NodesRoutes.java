package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import spark.Service;
import spark.Route;
import spark.Request;
import spark.Response;
import java.util.List;
import com.strumenta.mpsprotocol.data.NodeInfo;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.strumenta.mpsprotocol.RequestForPropertyChange;
import com.strumenta.mpsprotocol.data.NodeIDInModel;
import com.strumenta.mpsprotocol.data.RegularNodeIDInfo;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.strumenta.mpsprotocol.data.NodeInfoDetailed;

public class NodesRoutes {
  private SRepository repo;
  private DataExposer data;
  public NodesRoutes(SRepository repo, DataExposer data) {
    this.repo = repo;
    this.data = data;
  }

  public void addRoutes(Service sparkService) {
    sparkService.get("/nodes/:conceptName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String conceptName = req.params("conceptName");
          final List<NodeInfo> nodeInfos = ListSequence.fromList(new ArrayList<NodeInfo>());
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              List<SNode> nodes = data.rootNodesByConceptName(conceptName);
              ListSequence.fromList(nodeInfos).addSequence(ListSequence.fromList(nodes).select(new ISelector<SNode, NodeInfo>() {
                public NodeInfo select(SNode it) {
                  return data.toBasicNodeInfo(it);
                }
              }));
            }
          });
          return Server.OperationResult.success(nodeInfos);
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.put("/nodes/:modelName/:nodeId/property/:propertyName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          String modelName = req.params("modelName");
          String nodeId = req.params("nodeId");
          String propertyName = req.params("propertyName");
          String propertyValue = req.body();

          RequestForPropertyChange propertyChange = new RequestForPropertyChange();
          propertyChange.setNode(new NodeIDInModel(modelName, new RegularNodeIDInfo(Long.parseLong(nodeId))));
          propertyChange.setPropertyName(propertyName);
          propertyChange.setPropertyValue(propertyValue);

          new MessagesExecutor(new ServerController(repo, data)).executeMessage(propertyChange);
          return Server.OperationResult.success();
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
    sparkService.get("/nodes/:modelName/:nodeId/property/:propertyName", new Route() {
      @Override
      public Object handle(Request req, Response res) throws Exception {
        try {
          final String modelName = req.params("modelName");
          final String nodeId = req.params("nodeId");
          String propertyName = req.params("propertyName");
          final Wrappers._T<NodeInfoDetailed> node = new Wrappers._T<NodeInfoDetailed>();
          repo.getModelAccess().runReadAction(new Runnable() {
            public void run() {
              node.value = data.nodeInfoDetails(modelName, Long.parseLong(nodeId));
            }
          });

          if (node.value != null) {
            return Server.OperationResult.success(node.value.getProperties().get(propertyName));
          } else {
            throw new NotFoundException("Node " + modelName + "/" + nodeId);
          }
        } catch (Throwable e) {
          e.printStackTrace();
          return Server.OperationResult.failure(e);
        }
      }
    }, new JsonTransformer());
  }
}
