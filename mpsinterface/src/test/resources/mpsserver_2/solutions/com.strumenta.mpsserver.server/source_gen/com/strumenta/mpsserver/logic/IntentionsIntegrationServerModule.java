package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import java.util.Map;
import com.strumenta.mpsprotocol.KUUID;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.function.Consumer;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.UUID;
import java.util.Objects;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.lang.reflect.InvocationTargetException;

public class IntentionsIntegrationServerModule {
  private IntentionsIntegration intentionsIntegration;
  private Map<KUUID, IntentionsBlock> intentionsBlocks = MapSequence.fromMap(new HashMap<KUUID, IntentionsBlock>());

  public IntentionsIntegrationServerModule(SRepository repo) {
    this.intentionsIntegration = new IntentionsIntegration(repo);
  }

  private static class IntentionsBlock {
    /*package*/ KUUID uuid;
    /*package*/ List<IntentionsIntegration.Intention> intentions;
    private IntentionsBlock(KUUID uuid, List<IntentionsIntegration.Intention> intentions) {
      this.uuid = uuid;
      this.intentions = intentions;
    }

  }

  public static class Intention {
    public int index;
    public String description;
  }

  public boolean hasBlock(KUUID uuid) {
    return MapSequence.fromMap(intentionsBlocks).containsKey(uuid);
  }

  public KUUID createBlock(final SNode node, final Consumer<Tuples._2<KUUID, List<IntentionsIntegration.Intention>>> intentionsReceiver) {
    final KUUID uuid = new KUUID(UUID.randomUUID());

    intentionsIntegration.listIntentions(node, new Consumer<List<IntentionsIntegration.Intention>>() {
      @Override
      public void accept(List<IntentionsIntegration.Intention> intentions) {
        IntentionsBlock intentionsBlock = new IntentionsBlock(uuid, intentions);
        MapSequence.fromMap(intentionsBlocks).put(uuid, intentionsBlock);
        if (!(Objects.equals(uuid, intentionsBlock.uuid))) {
          throw new RuntimeException("This should not happen");
        }
        intentionsReceiver.accept(MultiTuple.<KUUID,List<IntentionsIntegration.Intention>>from(uuid, intentions));
      }
    });
    return uuid;
  }

  public boolean deleteBlock(final KUUID blockUUID) {
    if (MapSequence.fromMap(intentionsBlocks).containsKey(blockUUID)) {
      MapSequence.fromMap(intentionsBlocks).removeKey(blockUUID);
      return true;
    } else {
      return false;
    }
  }

  public void execute(final KUUID blockUUID, int index) {
    if (!(MapSequence.fromMap(intentionsBlocks).containsKey(blockUUID))) {
      throw new NotFoundException("Intentions block with UUID " + blockUUID + ". Known UUIDs: " + MapSequence.fromMap(intentionsBlocks).keySet());
    }
    ListSequence.fromList(MapSequence.fromMap(intentionsBlocks).get(blockUUID).intentions).getElement(index).execute();
  }

  public List<com.strumenta.mpsprotocol.data.Intention> intentionsData(final KUUID blockUUID) {
    if (!(MapSequence.fromMap(intentionsBlocks).containsKey(blockUUID))) {
      throw new NotFoundException("Intentions block with UUID " + blockUUID + ". Known UUIDs: " + MapSequence.fromMap(intentionsBlocks).keySet());
    }
    final Wrappers._int index = new Wrappers._int(0);
    final List<com.strumenta.mpsprotocol.data.Intention> intentions = ListSequence.fromList(new ArrayList<com.strumenta.mpsprotocol.data.Intention>());
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        @Override
        public void run() {
          ListSequence.fromList(intentions).addSequence(ListSequence.fromList(MapSequence.fromMap(intentionsBlocks).get(blockUUID).intentions).select(new ISelector<IntentionsIntegration.Intention, com.strumenta.mpsprotocol.data.Intention>() {
            public com.strumenta.mpsprotocol.data.Intention select(IntentionsIntegration.Intention it) {
              com.strumenta.mpsprotocol.data.Intention intentionData = new com.strumenta.mpsprotocol.data.Intention();
              intentionData.setIndex(index.value++);
              intentionData.setDescription(it.getDescription());
              return intentionData;
            }
          }));
        }
      });
    } catch (InterruptedException e) {
      throw new RuntimeException(e);
    } catch (InvocationTargetException e) {
      throw new RuntimeException(e);
    }
    return intentions;
  }
}
