package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import com.google.gson.stream.JsonReader;
import com.strumenta.mpsprotocol.data.NodeIDInfo;
import com.strumenta.mpsprotocol.data.RegularNodeIDInfo;
import com.strumenta.mpsprotocol.data.ForeignNodeIDInfo;
import java.util.Objects;
import com.google.gson.JsonElement;

/**
 * Provide help for serialization to JSON.
 * For example, ensure that long numbers are serialized as string to avoid approximations.
 */
public class Serialization {
  private static Serialization INSTANCE = new Serialization();
  private Gson gson;

  private Serialization() {
    gson = new GsonBuilder().setPrettyPrinting().registerTypeAdapter(Long.class, new TypeAdapter<Long>() {
      @Override
      public void write(JsonWriter w, Long value) throws IOException {
        w.value(Long.toString(value));
      }

      @Override
      public Long read(JsonReader r) throws IOException {
        throw new UnsupportedOperationException();
      }
    }).registerTypeAdapter(NodeIDInfo.class, new TypeAdapter<NodeIDInfo>() {
      @Override
      public void write(JsonWriter w, NodeIDInfo value) throws IOException {
        if (value == null) {
          w.nullValue();
        } else if (value instanceof RegularNodeIDInfo) {
          w.beginObject();
          w.name("regularId");
          RegularNodeIDInfo rni = ((RegularNodeIDInfo) value);
          w.value(Long.toString(rni.getRegularId()));
          w.endObject();
        } else if (value instanceof ForeignNodeIDInfo) {
          w.beginObject();
          w.name("foreignId");
          ForeignNodeIDInfo casted = ((ForeignNodeIDInfo) value);
          w.value(casted.getForeignId());
          w.endObject();
        } else {
          throw new UnsupportedOperationException("Unsupported NodeID: " + value);
        }
      }

      @Override
      public NodeIDInfo read(JsonReader r) throws IOException {
        r.beginObject();
        NodeIDInfo res;
        String nextName = r.nextName();
        if (Objects.equals(nextName, "regularId")) {
          String value = r.nextString();
          res = new RegularNodeIDInfo(Long.parseLong(value));
        } else if (Objects.equals(nextName, "foreignId")) {
          res = new ForeignNodeIDInfo(r.nextString());
        } else {
          throw new RuntimeException("regularId or foreignId expected");
        }
        r.endObject();
        return res;
      }
    }).create();
  }

  public static Serialization getInstance() {
    return INSTANCE;
  }

  public String jsonify(Object data) {
    return gson.toJson(data);
  }

  public String jsonifyTree(JsonElement data) {
    return gson.toJson(data);
  }

  public JsonElement jsonifyData(Object data) {
    return gson.toJsonTree(data);
  }

  public <T> T unserialize(String jsonString, Class<T> clazz) {
    return gson.fromJson(jsonString, clazz);
  }
}
