package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.eclipse.jetty.websocket.api.annotations.WebSocket;
import java.util.Map;
import org.eclipse.jetty.websocket.api.Session;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import com.strumenta.mpsprotocol.data.NodeIDInModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.util.Consumer;
import jetbrains.mps.errors.item.ReportItem;
import org.jetbrains.annotations.NotNull;
import com.strumenta.mpsprotocol.ErrorsForModelReport;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.errors.item.NodeReportItem;
import com.strumenta.mpsprotocol.ErrorsForNodeReport;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
import com.google.gson.JsonObject;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.strumenta.mpsprotocol.KUUID;
import com.strumenta.mpsprotocol.CreateIntentionsBlock;
import com.strumenta.mpsprotocol.CreateIntentionsBlockAnswer;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.strumenta.mpsprotocol.data.Intention;
import com.strumenta.mpsprotocol.DeleteIntentionsBlock;
import com.strumenta.mpsprotocol.GetIntentionsBlock;
import com.strumenta.mpsprotocol.GetIntentionsBlockAnswer;
import com.strumenta.mpsprotocol.data.Result;
import com.strumenta.mpsprotocol.ExecuteIntention;
import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;
import java.io.IOException;
import com.google.gson.JsonParser;
import java.util.Objects;
import com.strumenta.mpsprotocol.RequestForPropertyChange;
import com.strumenta.mpsprotocol.data.RegularNodeIDInfo;
import com.strumenta.mpsprotocol.AnswerPropertyChange;
import com.strumenta.mpsprotocol.RegisterForChanges;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import com.strumenta.mpsprotocol.PropertyChange;
import org.jetbrains.mps.openapi.event.SReferenceChangeEvent;
import com.strumenta.mpsprotocol.ReferenceChange;
import org.jetbrains.mps.openapi.event.SNodeAddEvent;
import com.strumenta.mpsprotocol.NodeAdded;
import com.strumenta.mpsprotocol.data.NodeInfo;
import com.strumenta.mpsprotocol.data.NodeInfoDetailed;
import org.jetbrains.mps.openapi.event.SNodeRemoveEvent;
import com.strumenta.mpsprotocol.NodeRemoved;
import com.strumenta.mpsprotocol.InstantiateConcept;
import com.strumenta.mpsprotocol.AddChild;
import com.strumenta.mpsprotocol.AddChildAnswer;
import com.strumenta.mpsprotocol.SetChild;
import com.strumenta.mpsprotocol.DeleteNode;
import com.strumenta.mpsprotocol.DefaultInsertion;
import com.strumenta.mpsprotocol.AnswerDefaultInsertion;
import com.strumenta.mpsprotocol.InsertNextSibling;
import com.strumenta.mpsprotocol.AskAlternatives;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import com.strumenta.mpsprotocol.AnswerAlternatives;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import com.strumenta.mpsprotocol.data.SmartReferenceInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.function.Predicate;
import com.strumenta.mpsprotocol.RequestForWrappingReferences;
import com.strumenta.mpsprotocol.RequestForDirectReferences;
import com.strumenta.mpsprotocol.CreateRoot;
import com.strumenta.mpsprotocol.AskErrorsForNode;
import com.strumenta.mpsprotocol.GetNode;
import com.strumenta.mpsprotocol.GetNodeAnswer;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.internal.collections.runtime.IMapping;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import com.strumenta.mpsprotocol.AnswerForDirectReferences;
import com.strumenta.mpsprotocol.data.NodeIDInfo;
import com.strumenta.mpsprotocol.AnswerForWrappingReferences;

@WebSocket
public class WebSocketHandler {

  public static ServerController serverController;
  private static boolean errorsOnModelEnabled = false;
  private static boolean errorsOnNodeEnabled = true;
  private IntentionsIntegrationServerModule intentionsIntegrationServerModule;
  private static Map<Session, List<Tuples._2<SModel, SNodeChangeListener>>> nodeChangeListeners = MapSequence.fromMap(new HashMap<Session, List<Tuples._2<SModel, SNodeChangeListener>>>());

  private void addSNodeChangeListener(Session session, SModel model, SNodeChangeListener nodeChangeListener) {
    if (!(MapSequence.fromMap(nodeChangeListeners).containsKey(session))) {
      MapSequence.fromMap(nodeChangeListeners).put(session, ListSequence.fromList(new LinkedList<Tuples._2<SModel, SNodeChangeListener>>()));
    }
    ListSequence.fromList(MapSequence.fromMap(nodeChangeListeners).get(session)).addElement(MultiTuple.<SModel,SNodeChangeListener>from(model, nodeChangeListener));
  }

  private void deleteAllSNodeChangeListeners(Session session) {
    if (!(MapSequence.fromMap(nodeChangeListeners).containsKey(session))) {
      return;
    }

    for (Tuples._2<SModel, SNodeChangeListener> t : ListSequence.fromList(MapSequence.fromMap(nodeChangeListeners).get(session))) {
      t._0().removeChangeListener(t._1());
    }
    ListSequence.fromList(MapSequence.fromMap(nodeChangeListeners).get(session)).clear();
  }

  public WebSocketHandler(IntentionsIntegrationServerModule intentionsIntegrationServerModule) {
    this.intentionsIntegrationServerModule = intentionsIntegrationServerModule;
  }

  private NodeIDInModel toNodeIDInModel(SNode node) {
    if (node == null) {
      return null;
    }
    NodeIDInModel res = new NodeIDInModel();
    res.setModel(SModelOperations.getModelName(SNodeOperations.getModel(node)));
    res.setId(serverController.getData().toBasicNodeInfo(node).getId());
    return res;
  }

  private void triggerErrorsCheck(final Session session, final SModel model, final SNode root) {
    System.out.println("triggerErrorsCheck, root " + root);
    if (errorsOnModelEnabled) {
      ModelChecker modelChecker = new ModelChecker();
      modelChecker.check(model, new Consumer<List<ReportItem>>() {
        @Override
        public void consume(@NotNull List<ReportItem> items) {
          if (session.isOpen()) {
            ErrorsForModelReport errorsForModelReport = new ErrorsForModelReport();
            errorsForModelReport.setModel(SModelOperations.getModelName(model));
            errorsForModelReport.getIssues().addAll(ListSequence.fromList(items).select(new ISelector<ReportItem, ErrorsForModelReport.IssueDescription>() {
              public ErrorsForModelReport.IssueDescription select(ReportItem it) {
                ErrorsForModelReport.IssueDescription issue = new ErrorsForModelReport.IssueDescription();
                issue.setSeverity(it.getSeverity().name());
                issue.setMessage(it.getMessage());
                if (it instanceof NodeReportItem) {
                  NodeReportItem nodeReportItem = ((NodeReportItem) it);
                  issue.setNode(serverController.getData().toNodeIDInfo(nodeReportItem.getNode().getNodeId()));
                }
                return issue;
              }
            }).toListSequence());
            sendObject(session, errorsForModelReport);
          }
        }
      });
    }
    if (errorsOnNodeEnabled && root != null) {
      NodeChecker nodeChecker = new NodeChecker();
      nodeChecker.check(root, new Consumer<List<NodeReportItem>>() {
        @Override
        public void consume(@NotNull List<NodeReportItem> items) {
          if (session.isOpen()) {
            ErrorsForNodeReport errorsForNodeReport = new ErrorsForNodeReport();
            errorsForNodeReport.setRootNode(serverController.getData().toNodeIDInModel(root));
            errorsForNodeReport.getIssues().addAll(ListSequence.fromList(items).select(new ISelector<NodeReportItem, ErrorsForNodeReport.IssueDescription>() {
              public ErrorsForNodeReport.IssueDescription select(NodeReportItem nodeReportItem) {
                ErrorsForNodeReport.IssueDescription issue = new ErrorsForNodeReport.IssueDescription();
                issue.setSeverity(nodeReportItem.getSeverity().name());
                issue.setMessage(nodeReportItem.getMessage());
                issue.setNode(serverController.getData().toNodeIDInfo(nodeReportItem.getNode().getNodeId()));
                return issue;
              }
            }).toListSequence());
            sendObject(session, errorsForNodeReport);
          }
        }
      });
    }
  }

  @OnWebSocketClose
  public void onClose(Session session, int statusCode, String reason) {
    deleteAllSNodeChangeListeners(session);
  }

  private boolean handleIntentionsMessages(final Session session, final String message, JsonObject msgJson) {
    switch (msgJson.get("type").getAsString().toLowerCase()) {
      case "createintentionsblock":
        try {
          serverController.getRepo().getModelAccess().runReadAction(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<KUUID>() {
            public KUUID invoke() {
              CreateIntentionsBlock msg = Serialization.getInstance().unserialize(message, CreateIntentionsBlock.class);
              final CreateIntentionsBlockAnswer answer = new CreateIntentionsBlockAnswer();
              answer.setRequestId(msg.getRequestId());
              return intentionsIntegrationServerModule.createBlock(serverController.getData().toSNode(msg.getNode()), new java.util.function.Consumer<Tuples._2<KUUID, List<IntentionsIntegration.Intention>>>() {
                @Override
                public void accept(Tuples._2<KUUID, List<IntentionsIntegration.Intention>> t) {
                  List<IntentionsIntegration.Intention> intentions = t._1();

                  final Wrappers._int index = new Wrappers._int(0);
                  answer.setIntentions(ListSequence.fromList(intentions).select(new ISelector<IntentionsIntegration.Intention, Intention>() {
                    public Intention select(IntentionsIntegration.Intention it) {
                      Intention i = new Intention();
                      i.setDescription(it.getDescription());
                      i.setIndex(index.value++);
                      return i;
                    }
                  }).toListSequence());
                  answer.setBlockUUID(t._0());
                  sendObject(session, answer);
                }
              });
            }
          }));
        } catch (Throwable t) {
          t.printStackTrace();
        }
        return true;
      case "deleteintentionsblock":
        try {
          DeleteIntentionsBlock msg = Serialization.getInstance().unserialize(message, DeleteIntentionsBlock.class);

          intentionsIntegrationServerModule.deleteBlock(msg.getBlockUUID());
        } catch (Throwable t) {
          t.printStackTrace();
        }
        return true;
      case "getintentionsblock":
        {
          GetIntentionsBlock msg = Serialization.getInstance().unserialize(message, GetIntentionsBlock.class);
          try {
            GetIntentionsBlockAnswer answer = new GetIntentionsBlockAnswer();
            answer.setBlockUUID(msg.getBlockUUID());
            answer.setIntentions(intentionsIntegrationServerModule.intentionsData(msg.getBlockUUID()));
            answer.setRequestId(msg.getRequestId());
            sendObject(session, answer);
          } catch (NotFoundException e) {
            GetIntentionsBlockAnswer answer = new GetIntentionsBlockAnswer();
            answer.setBlockUUID(msg.getBlockUUID());
            answer.setResult(Result.Companion.failure(e.getMessage()));
            sendObject(session, answer);
          } catch (Throwable t) {
            t.printStackTrace();
          }
          return true;
        }
      case "executeintention":
        try {
          final ExecuteIntention msg = Serialization.getInstance().unserialize(message, ExecuteIntention.class);
          serverController.getRepo().getModelAccess().executeCommandInEDT(new Runnable() {
            public void run() {
              intentionsIntegrationServerModule.execute(msg.getBlockUUID(), msg.getIndex());
            }
          });
        } catch (Throwable t) {
          t.printStackTrace();
        }
        return true;
      default:
        return false;
    }
  }

  @OnWebSocketMessage
  public void handleTextMessage(final Session session, final String message) throws IOException {
    JsonParser parser = new JsonParser();
    JsonObject data = parser.parse(message).getAsJsonObject();
    System.out.println("   data: " + data);
    String messageType = data.get("type").getAsString();
    if (Objects.equals(messageType.toLowerCase(), "PropertyChange".toLowerCase()) || Objects.equals(messageType, RequestForPropertyChange.class.getSimpleName())) {
      try {
        final RequestForPropertyChange request = Serialization.getInstance().unserialize(message, RequestForPropertyChange.class);

        final String requestId = request.getRequestId();

        serverController.executePropertyChange(request.getNode().getModel(), ((RegularNodeIDInfo) request.getNode().getId()).getRegularId(), request.getPropertyName(), request.getPropertyValue(), new Consumer<Object>() {
          @Override
          public void consume(@NotNull Object newValue) {
            AnswerPropertyChange answer = new AnswerPropertyChange();
            answer.setRequestId(requestId);
            sendObject(session, answer);
          }
        });

      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "registerForChanges")) {
      try {
        RegisterForChanges msg = Serialization.getInstance().unserialize(message, RegisterForChanges.class);
        final String modelName = msg.getModelName();
        serverController.getRepo().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            SModel model = serverController.getData().findModelByName(modelName);
            triggerErrorsCheck(session, model, null);
            SNodeChangeListener sNodeChangeListener = new SNodeChangeListener() {
              @Override
              public void propertyChanged(@NotNull SPropertyChangeEvent pce) {
                if (session.isOpen()) {
                  PropertyChange propertyChange = new PropertyChange();
                  propertyChange.setNode(serverController.getData().toNodeIDInModel(pce.getNode()));
                  propertyChange.setPropertyName(pce.getProperty().getName());
                  propertyChange.setPropertyValue(pce.getNewValue());
                  sendObject(session, propertyChange);
                  triggerErrorsCheck(session, model, pce.getNode().getContainingRoot());
                }
              }

              @Override
              public void referenceChanged(@NotNull SReferenceChangeEvent event) {
                if (session.isOpen()) {
                  ReferenceChange message = new ReferenceChange();
                  message.setNode(toNodeIDInModel(event.getNode()));
                  message.setReferenceName(event.getAssociationLink().getName());
                  if (event.getNewValue() == null) {
                    message.setReferenceValue(toNodeIDInModel(null));
                  } else {
                    message.setReferenceValue(toNodeIDInModel(event.getNewValue().getTargetNode()));
                  }
                  sendObject(session, message);
                  triggerErrorsCheck(session, model, event.getNode().getContainingRoot());
                }
              }

              @Override
              public void nodeAdded(@NotNull SNodeAddEvent nae) {
                if (session.isOpen()) {
                  SNode child = nae.getChild();
                  NodeAdded nodeAdded = new NodeAdded();
                  NodeInfo parentNodeInfo = null;
                  if (nae.getParent() != null) {
                    parentNodeInfo = serverController.getData().toBasicNodeInfo(nae.getParent());
                  }
                  NodeInfoDetailed childNodeInfo = serverController.getData().toInfoDetailed(nae.getChild());
                  if (parentNodeInfo != null) {
                    nodeAdded.setParentNodeId(parentNodeInfo.getId());
                  }

                  nodeAdded.setChild(childNodeInfo);
                  nodeAdded.setIndex(SNodeOperations.getIndexInParent(child));
                  if (nae.getAggregationLink() != null) {
                    nodeAdded.setRelationName(nae.getAggregationLink().getName());
                  }

                  sendObject(session, nodeAdded);
                  SNode root = (nae.getParent() == null ? nae.getChild() : nae.getParent().getContainingRoot());
                  triggerErrorsCheck(session, model, root);
                }
              }

              @Override
              public void nodeRemoved(@NotNull SNodeRemoveEvent nre) {
                if (session.isOpen()) {
                  try {
                    NodeRemoved nodeRemoved = new NodeRemoved();
                    SNode child = nre.getChild();
                    int index = SNodeOperations.getIndexInParent(child);
                    NodeInfo parentNodeInfo = null;
                    if (nre.getParent() != null) {
                      parentNodeInfo = serverController.getData().toBasicNodeInfo(nre.getParent());
                    }
                    NodeInfoDetailed childNodeInfo = serverController.getData().toInfoDetailed(nre.getChild());
                    if (parentNodeInfo != null) {
                      nodeRemoved.setParentNodeId(parentNodeInfo.getId());
                    }
                    nodeRemoved.setChild(childNodeInfo);
                    nodeRemoved.setIndex(index);
                    if (nre.getAggregationLink() != null) {
                      nodeRemoved.setRelationName(nre.getAggregationLink().getName());
                    }
                    sendObject(session, nodeRemoved);
                  } catch (Throwable e) {
                    e.printStackTrace();
                  }
                  SNode root = (nre.getParent() == null ? nre.getChild().getContainingRoot() : nre.getParent().getContainingRoot());
                  triggerErrorsCheck(session, model, root);
                }
              }
            };
            model.addChangeListener(sNodeChangeListener);
            addSNodeChangeListener(session, model, sNodeChangeListener);
          }
        });
        System.out.println("  model change listener added");
      } catch (Throwable e) {
        e.printStackTrace();
      }
    } else if (Objects.equals(messageType, "instantiateConcept")) {
      try {
        InstantiateConcept msg = Serialization.getInstance().unserialize(message, InstantiateConcept.class);
        serverController.instantiateNode(msg.getNodeToReplace(), msg.getConceptToInstantiate());
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType.toLowerCase(), AddChild.class.getSimpleName().toLowerCase())) {
      try {
        final AddChild aic = Serialization.getInstance().unserialize(message, AddChild.class);
        if (aic.getConceptToInstantiate() != null) {
          serverController.addChild(aic.getContainer(), aic.getContainmentName(), aic.getConceptToInstantiate(), aic.getSmartRefNodeId(), aic.getIndex(), new NodeReceiver() {
            @Override
            public void receive(SNode newNode) {
              AddChildAnswer addChildResponse = new AddChildAnswer();
              addChildResponse.setRequestId(aic.getRequestId());
              addChildResponse.setNodeCreated(serverController.getData().toNodeIDInModel(newNode));
              sendObject(session, addChildResponse);
            }
          });
        } else {
        }
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "setChild")) {
      try {
        SetChild sic = Serialization.getInstance().unserialize(message, SetChild.class);
        serverController.setChild(sic.getContainer(), sic.getContainmentName(), sic.getConceptToInstantiate(), sic.getSmartRefNodeId());
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "deleteNode")) {
      try {
        DeleteNode dn = Serialization.getInstance().unserialize(message, DeleteNode.class);
        serverController.deleteNode(dn.getNode());
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "defaultInsertion")) {
      try {
        final DefaultInsertion di = Serialization.getInstance().unserialize(message, DefaultInsertion.class);
        serverController.defaultInsertion(di.getModelName(), di.getContainer(), di.getContainmentName(), new Callback<SNode>() {
          @Override
          public void execute(SNode createdNode) {
            AnswerDefaultInsertion adi = new AnswerDefaultInsertion();
            adi.setType("AnswerDefaultInsertion");
            adi.setRequestId(di.getRequestId());
            adi.setAddedNodeID(serverController.getData().toBasicNodeInfo(createdNode).getId());
            sendObject(session, adi);
          }
        });
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "insertNextSibling")) {
      try {
        InsertNextSibling msg = Serialization.getInstance().unserialize(message, InsertNextSibling.class);
        serverController.insertNextSibling(msg.getModelName(), msg.getSibling());
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "askAlternatives")) {
      try {
        AskAlternatives aa = Serialization.getInstance().unserialize(message, AskAlternatives.class);
        Iterable<SAbstractConcept> alternatives = serverController.askAlternatives(aa.getModelName(), aa.getNodeId(), aa.getContainmentName());
        final AnswerAlternatives answer = new AnswerAlternatives();
        answer.setType("AnswerAlternatives");
        answer.setRequestId(aa.getRequestId());
        answer.setItems(ListSequence.fromList(new ArrayList<AnswerAlternatives.AnswerAlternativesItem>()));
        final Wrappers._int lastSmartRef = new Wrappers._int(0);
        for (final SAbstractConcept alt : Sequence.fromIterable(alternatives)) {
          List<SmartReferenceInfo> smartRefs = serverController.getSmartReferenceAlternatives(aa.getModelName(), aa.getNodeId(), aa.getContainmentName(), alt);
          if (smartRefs == null) {
            String label = SConceptOperations.conceptAlias(alt);
            if (label == null || (label == null || label.length() == 0)) {
              label = alt.getName();
            }
            answer.getItems().add(new AnswerAlternatives.AnswerAlternativesItem(alt.getQualifiedName(), label));
          } else {
            ListSequence.fromList(smartRefs).select(new ISelector<SmartReferenceInfo, AnswerAlternatives.SmartReferenceAlternative>() {
              public AnswerAlternatives.SmartReferenceAlternative select(SmartReferenceInfo it) {
                String alias;
                if (it.getConceptAlias() != null && !(isEmptyString(it.getConceptAlias()))) {
                  alias = it.getConceptAlias();
                } else {
                  alias = it.getName();
                }
                return new AnswerAlternatives.SmartReferenceAlternative(alt.getQualifiedName(), alias, it);
              }
            }).visitAll(new IVisitor<AnswerAlternatives.SmartReferenceAlternative>() {
              public void visit(final AnswerAlternatives.SmartReferenceAlternative it) {
                if (answer.getItems().stream().noneMatch(new Predicate<AnswerAlternatives.AnswerAlternativesItem>() {
                  public boolean test(AnswerAlternatives.AnswerAlternativesItem existing) {
                    return existing instanceof AnswerAlternatives.SmartReferenceAlternative && Objects.equals(((AnswerAlternatives.SmartReferenceAlternative) existing).getNode().getId(), it.getNode().getId());
                  }
                })) {
                  answer.getItems().add(lastSmartRef.value++, it);
                }
              }
            });
          }
        }
        sendObject(session, answer);
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "requestForWrappingReferences")) {
      try {
        serverController.getRepo().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            handleRequestForWrappingReferences(session, Serialization.getInstance().unserialize(message, RequestForWrappingReferences.class));
          }
        });
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "requestForDirectReferences")) {
      try {
        handlRequestForDirectReferences(session, Serialization.getInstance().unserialize(message, RequestForDirectReferences.class));
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType.toLowerCase(), ReferenceChange.class.getSimpleName().toLowerCase())) {
      try {
        handleReferenceChange(session, Serialization.getInstance().unserialize(message, ReferenceChange.class));
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType, "createRoot")) {
      try {
        handleCreateRoot(session, Serialization.getInstance().unserialize(message, CreateRoot.class));
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (Objects.equals(messageType.toLowerCase(), AskErrorsForNode.class.getSimpleName().toLowerCase())) {
      try {
        serverController.getRepo().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            AskErrorsForNode msg = Serialization.getInstance().unserialize(message, AskErrorsForNode.class);
            SModel model = serverController.getData().findModelByName(msg.getRootNode().getModel());
            SNode root = serverController.getData().toSNode(msg.getRootNode());
            triggerErrorsCheck(session, model, root);
          }
        });
      } catch (Throwable t) {
        t.printStackTrace();
      }
    } else if (handleIntentionsMessages(session, message, data)) {
      // handled 
    } else if (handleNodesMessages(session, message, data)) {
      // handled 
    } else {
      System.out.println("Unknown message type: <" + messageType + ">");
    }
  }

  private boolean handleNodesMessages(final Session session, final String message, JsonObject msgJson) {
    switch (msgJson.get("type").getAsString().toLowerCase()) {
      case "getnode":
        try {
          serverController.getRepo().getModelAccess().runReadAction(new Runnable() {
            public void run() {
              GetNode msg = Serialization.getInstance().unserialize(message, GetNode.class);
              GetNodeAnswer answer = new GetNodeAnswer();
              answer.setNodeData(serverController.getData().toInfoDetailed(msg.getNode()));
              answer.setRequestId(msg.getRequestId());
              sendObject(session, answer);
            }
          });
        } catch (Throwable t) {
          t.printStackTrace();
        }
        return true;
      default:
        return false;
    }
  }

  private void handleCreateRoot(Session session, final CreateRoot message) {
    serverController.getRepo().getModelAccess().executeCommandInEDT(new Runnable() {
      public void run() {
        SModel model = serverController.getData().findModelByName(message.getModelName());
        SAbstractConcept concept = serverController.findConcept(message.getModelName(), message.getConceptName());
        SNode newRoot = SNodeFactoryOperations.createNewNode(concept, null);
        for (IMapping<String, Object> pv : MapSequence.fromMap(message.getPropertiesValues())) {
          newRoot.setProperty(serverController.findProperty(newRoot, pv.key()), pv.value().toString());
        }
        SModelOperations.addRootNode(model, newRoot);
      }
    });
  }

  private void handleReferenceChange(Session session, final ReferenceChange message) {
    if (message == null) {
      throw new IllegalArgumentException("message should not be null");
    }
    serverController.getRepo().getModelAccess().executeCommandInEDT(new Runnable() {
      public void run() {
        SNode container = serverController.getData().toSNode(message.getNode());
        SReferenceLink refLink = ConceptUtils.findReferenceOnNodeByName(container, message.getReferenceName());
        if (message.getReferenceValue() == null) {
          container.setReferenceTarget(refLink, null);
        } else {
          SNode referenceTarget = serverController.getData().toSNode(message.getReferenceValue());
          container.setReferenceTarget(refLink, referenceTarget);
        }
      }
    });
  }

  private void handlRequestForDirectReferences(Session session, final RequestForDirectReferences request) {
    final AnswerForDirectReferences answer = new AnswerForDirectReferences();
    serverController.getRepo().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode container = serverController.getData().getSNode(request.getModelName(), request.getContainer());
        List<SNode> alternatives = new EditingSupport().visibleNodesForDirectReferences(container, ConceptUtils.findReferenceOnNodeByName(container, request.getReferenceName()));
        answer.setRequestId(request.getRequestId());
        answer.setItems(ListSequence.fromList(alternatives).select(new ISelector<SNode, AnswerForDirectReferences.DirAlternative>() {
          public AnswerForDirectReferences.DirAlternative select(SNode alternativeNode) {
            String label = NodeUtils.defaultLabel(alternativeNode);
            String modelName = SModelOperations.getModelName(SNodeOperations.getModel(alternativeNode));
            NodeIDInfo nodeId = serverController.getData().toBasicNodeInfo(alternativeNode).getId();
            return new AnswerForDirectReferences.DirAlternative(label, modelName, nodeId);
          }
        }).toListSequence());
      }
    });
    sendObject(session, answer);
  }

  private void handleRequestForWrappingReferences(Session session, RequestForWrappingReferences request) {
    SNode container = serverController.getData().getSNode(request.getModelName(), request.getContainer());

    List<SNode> alternatives = new EditingSupport().visibleNodesForWrappingReference(container, ConceptUtils.findContainmentOnNodeByName(container, request.getContainmentName()), ConceptUtils.findWrappingReferenceInContainmentOnNodeByName(container, request.getContainmentName()));
    AnswerForWrappingReferences answer = new AnswerForWrappingReferences();
    answer.setRequestId(request.getRequestId());
    answer.setItems(ListSequence.fromList(alternatives).select(new ISelector<SNode, AnswerForWrappingReferences.WraAlternative>() {
      public AnswerForWrappingReferences.WraAlternative select(SNode alternativeNode) {
        String label = NodeUtils.defaultLabel(alternativeNode);
        String modelName = SModelOperations.getModelName(SNodeOperations.getModel(alternativeNode));
        NodeIDInfo nodeId = serverController.getData().toBasicNodeInfo(alternativeNode).getId();
        return new AnswerForWrappingReferences.WraAlternative(label, modelName, nodeId);
      }
    }).toListSequence());
    sendObject(session, answer);
  }

  private void sendObject(Session session, Object object) {
    String json = Serialization.getInstance().jsonify(object);
    System.out.println("SENDING " + json);
    try {
      session.getRemote().sendString(json);
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  @OnWebSocketMessage
  public void handleBinaryMessage(Session session, byte[] buffer, int offset, int length) throws IOException {
    System.err.println("warning: we ignore binary messages");
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
