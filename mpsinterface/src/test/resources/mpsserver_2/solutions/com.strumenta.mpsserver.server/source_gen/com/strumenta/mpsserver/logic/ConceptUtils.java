package com.strumenta.mpsserver.logic;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Objects;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration__BehaviorDescriptor;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class ConceptUtils {
  /*package*/ static SContainmentLink findContainmentOnNodeByName(SNode node, String containmentName) {
    for (SContainmentLink link : CollectionSequence.fromCollection(SNodeOperations.getConcept(node).getContainmentLinks())) {
      if (Objects.equals(link.getName(), containmentName)) {
        return link;
      }
    }
    throw new RuntimeException("Containment link not found: " + containmentName);
  }
  /*package*/ static SReferenceLink findReferenceOnNodeByName(SNode node, String containmentName) {
    for (SReferenceLink link : CollectionSequence.fromCollection(SNodeOperations.getConcept(node).getReferenceLinks())) {
      if (Objects.equals(link.getName(), containmentName)) {
        return link;
      }
    }
    throw new RuntimeException("Reference link not found: " + containmentName);
  }
  /*package*/ static SReferenceLink findWrappingReferenceInContainmentOnNodeByName(SNode node, String containmentName) {
    SContainmentLink containmentLink = findContainmentOnNodeByName(node, containmentName);
    Collection<SReferenceLink> refs = containmentLink.getTargetConcept().getReferenceLinks();
    if (refs.size() != 1) {
      throw new RuntimeException("Exactly one reference expected");
    }
    return refs.iterator().next();
  }
  /*package*/ static SNode findEditorForConcept(SAbstractConcept concept) {
    SNode conceptDeclaration = SNodeOperations.cast(concept.getDeclarationNode(), CONCEPTS.ConceptDeclaration$qU);
    return findEditorForConcept(conceptDeclaration);
  }
  /*package*/ static SNode findEditorForConcept(SNode conceptDeclaration) {
    if (conceptDeclaration == null) {
      return null;
    }
    List<SNode> editorNodeCandidates = AbstractConceptDeclaration__BehaviorDescriptor.findConceptAspectCollection_id1n18fON7w20.invoke(conceptDeclaration, LanguageAspect.EDITOR);
    SNode editorNode = Sequence.fromIterable(SNodeOperations.ofConcept(editorNodeCandidates, CONCEPTS.ConceptEditorDeclaration$s6)).first();
    if (editorNode == null && SLinkOperations.getTarget(conceptDeclaration, LINKS.extends$LQV3) != null) {
      return findEditorForConcept(SLinkOperations.getTarget(conceptDeclaration, LINKS.extends$LQV3));
    }
    return editorNode;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ConceptDeclaration$qU = MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
    /*package*/ static final SConcept ConceptEditorDeclaration$s6 = MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9845363abL, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink extends$LQV3 = MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends");
  }
}
