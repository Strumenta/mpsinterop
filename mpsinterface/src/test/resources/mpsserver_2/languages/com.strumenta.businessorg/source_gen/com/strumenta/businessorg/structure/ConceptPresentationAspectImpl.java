package com.strumenta.businessorg.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Executor;
  private ConceptPresentation props_Organization;
  private ConceptPresentation props_Person;
  private ConceptPresentation props_Process;
  private ConceptPresentation props_ProcessStep;
  private ConceptPresentation props_Role;
  private ConceptPresentation props_RolePlayed;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Executor:
        if (props_Executor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Executor = cpb.create();
        }
        return props_Executor;
      case LanguageConceptSwitch.Organization:
        if (props_Organization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Organization = cpb.create();
        }
        return props_Organization;
      case LanguageConceptSwitch.Person:
        if (props_Person == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Person = cpb.create();
        }
        return props_Person;
      case LanguageConceptSwitch.Process:
        if (props_Process == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Process = cpb.create();
        }
        return props_Process;
      case LanguageConceptSwitch.ProcessStep:
        if (props_ProcessStep == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ProcessStep = cpb.create();
        }
        return props_ProcessStep;
      case LanguageConceptSwitch.Role:
        if (props_Role == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Role = cpb.create();
        }
        return props_Role;
      case LanguageConceptSwitch.RolePlayed:
        if (props_RolePlayed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x96ad5b8f04fe4e16L, 0xa7d60e014b8726e4L, 0x4923b41015880f85L, 0x4923b41015880f86L, "role", "", "");
          props_RolePlayed = cpb.create();
        }
        return props_RolePlayed;
    }
    return null;
  }
}
